/// <reference types="node" />
import { KeyObject } from 'crypto';
/**
 * Helper class to generate and store RSA assymetric keys.
 */
export default class HiveKeyPair {
    /** Public key */
    private publicKey;
    /** Private key */
    private privateKey;
    /**
     * Create a new `HivePublicKeyCreator`.
     * @param {KeyObject} privateKey A `KeyObject` representing the private key.
     * @param {KeyObject} publicKey A `KeyObject` representing the public key.
     */
    constructor(publicKey: KeyObject, privateKey: KeyObject);
    /**
     * Create a new `HivePublicKeyCreator` with a newly generated asymmetric key
     * pair.
     */
    static create(): Promise<HiveKeyPair>;
    /**
     * Synchronously create a new `HivePublicKeyCreator` with a newly generated
     * asymmetric key pair.
     */
    static createSync(): HiveKeyPair;
    /**
     * Create a new `HivePublicKeyCreator` from a file that contains a private
     * key in PEM-encoded format.
     *
     * @param {string} file File to read private key from
     */
    static readFromFile(file: string): Promise<HiveKeyPair>;
    /**
     * Synchronously create a new `HivePublicKeyCreator` from a file that
     * contains a private key in PEM-encoded format.
     *
     * @param {string} file Filename to read the private key from.
     */
    static readFromFileSync(file: string): HiveKeyPair;
    /**
     * Write the private key to file in PEM-encoded format.
     *
     * @param {string} filename Filename to store the private key to.
     * @return {Promise<void>} The `Promise` representing the filesystem write,
     * fulfills with `undefined` upon success.
     */
    writePrivateKey(filename: string): Promise<void>;
    /**
     * Synchronously write the private key to file in PEM-encoded format.
     *
     * @param {string} filename Filename to store the private key to.
     */
    writePrivateKeySync(filename: string): void;
    /**
     * Return the public key in a format used by the Hive Public Key Service.
     */
    exportPublicKey(): {
        modulus: string;
        exponent: string;
    };
}
