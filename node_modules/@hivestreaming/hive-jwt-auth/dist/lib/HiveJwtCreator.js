"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const jsonwebtoken_1 = require("jsonwebtoken");
/**
 * Helper class to create JWTs for authenticating with Hive services using the
 * Hive plugin.
 */
class HiveJwtCreator {
    /**
     * Constructor for `HiveJwtCreator`
     * @param {string} partnerId Partner Id
     * @param {Buffer} privateKey Private key contents
     */
    constructor(partnerId, privateKey) {
        this.partnerId = partnerId;
        this.privateKey = privateKey;
    }
    /**
     * Construct a new `HiveJwtCreator` given a private key filename. An error
     * reading the file will bubble to caller.
     * @param {string} partnerId Partner Id
     * @param {string} privateKeyFilename Private key filename
     */
    static async create(partnerId, privateKeyFilename) {
        try {
            const privateKey = await fs_1.promises.readFile(privateKeyFilename);
            return new HiveJwtCreator(partnerId, privateKey);
        }
        catch (ex) {
            throw new AggregateError([ex], `Could not read file ${privateKeyFilename}`);
        }
    }
    /**
     * Synchronously onstruct a new `HiveJwtCreator` given a private key
     * filename. An error reading the file will bubble to caller.
     * @param {string} partnerId Partner Id
     * @param {string} privateKeyFilename Private key filename
     */
    static createSync(partnerId, privateKeyFilename) {
        try {
            const privateKey = (0, fs_1.readFileSync)(privateKeyFilename);
            return new HiveJwtCreator(partnerId, privateKey);
        }
        catch (ex) {
            throw new AggregateError([ex], `Could not read file ${privateKeyFilename}`);
        }
    }
    /**
     * Create a new JWT.
     * @param {string} keyId Key Id
     * @param {string} customerId Customer Id
     * @param {string} videoId Video Id (also known as Content Id).
     * @param {string[]} manifests List of manifests
     * @param {string | number} expiresIn Expires in, expressed in seconds or a
     * string describing a time span [zeit/ms](https://github.com/zeit/ms.js).
     * Eg: 60, "2 days", "10h", "7d"
     * @param {string} eventName Event name
     */
    sign(keyId, customerId, videoId, manifests, expiresIn, eventName) {
        const data = {
            "iss": this.partnerId,
            "sub": videoId,
            "ver": "1.0",
            "aud": "https://hivestreaming.com",
            "cid": customerId,
            "evn": eventName,
            "man": manifests
        };
        const token = (0, jsonwebtoken_1.sign)(data, this.privateKey, {
            algorithm: 'RS256',
            keyid: keyId,
            expiresIn
        });
        return token;
    }
    /**
     * Create a new JWT.
     * @param {string} keyId Key Id
     * @param {string} customerId Customer Id
     * @param {string} videoId Video Id (also known as Content Id).
     * @param {string | number} expiresIn Expires in, expressed in seconds or a
     * string describing a time span [zeit/ms](https://github.com/zeit/ms.js).
     * Eg: 60, "2 days", "10h", "7d"
     * @param {'test' | 'prod'} endpoint Endpoint in URL.
     */
    signReporting(keyId, customerId, videoId, expiresIn, endpoint = 'prod') {
        const data = {
            "iss": this.partnerId,
            "sub": videoId,
            "ver": "1.0",
            "aud": "https://hivestreaming.com",
            "cid": customerId,
            "act": "reporting"
        };
        const token = (0, jsonwebtoken_1.sign)(data, this.privateKey, {
            algorithm: 'RS256',
            keyid: keyId,
            expiresIn
        });
        return `https://api${endpoint === 'prod' ? '' : '-' + endpoint}.hivestreaming.com/v1/url-redirect/adminportal-jwt/${token}`;
    }
}
exports.default = HiveJwtCreator;
