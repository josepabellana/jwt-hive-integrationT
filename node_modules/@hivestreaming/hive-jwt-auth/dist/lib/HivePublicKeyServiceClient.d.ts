/** A type representing the JSON payload to create a new public key on the Hive
 * Public Key Service. */
export declare type PublicKeyStorePayload = {
    /** Partner Id */
    partnerId: string;
    /** Key Id */
    keyId: string;
    /** Public key exponent */
    exponent: string;
    /** Public key odulus */
    modulus: string;
    /** Expiration as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    expiration: number;
};
/** A type representing a public key on the Hive Public Key Service. */
export declare type PublicKeyInfo = {
    /** Partner Id */
    partnerId: string;
    /** Key Id */
    keyId: string;
    /** Public key exponent */
    exponent: string;
    /** Public key modulus */
    modulus: string;
    /** Expiration as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    expiration: number;
    /** Creation date as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    createdAt: number;
};
/** A type representing a list of public keys on the Hive Public Key Service. */
export declare type PublicKeyInfoRedactedList = {
    /** Partner Id */
    partnerId: string;
    /** Key Id */
    keyId: string;
    /** Expiration as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    expiration: number;
    /** Creation date as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    createdAt: number;
    /** Deletion date as a timestamp representing seconds since 1 January 1970
     * 00:00:00 UTC */
    deletedAt?: number;
}[];
/** A class encapsulating authentication errors to the Hive Public Key Service.
 * */
export declare class HiveAuthorizationError extends Error {
    constructor();
}
/** A class encapsulating validation errors from the Hive Public Key Service. */
export declare class HivePublicKeyValidationError extends Error {
    constructor(errors: unknown);
}
/** A class encapsulating an error from the Hive Public Key Service when
 * requesting a key that has not been published to the service. */
export declare class HivePublicKeyNotFoundError extends Error {
    constructor(partnerId: string, keyId?: string);
}
/** A class encapsulating an error from the Hive Public Key Service when
 * requesting a key that has been deleted on the service. */
export declare class HivePublicKeyDeletedError extends Error {
    constructor(partnerId: string, keyId?: string);
}
/** A helper class encapsulating the CRUD methods of the Hive Public Key
 * Service. */
export default class HivePublicKeyServiceClient {
    /** `Axios` client */
    private client;
    /** Partner Id */
    private partnerId;
    /**
     * Construct a new client to the Hive Public Key Service.
     *
     * @param partnerId Partner Id
     * @param partnerToken Partner Token
     * @param endpoint The endpoint (`test` or `prod`) to send requests to
     */
    constructor(partnerId: string, partnerToken: string, endpoint?: 'prod' | 'test');
    /**
     * Get an individual public key.
     *
     * @param keyId Key Id
     * @returns A `Promise` that resolves to object of type `PublicKeyInfo`
     * representing the public key on the Hive Public Key service.
     */
    get(keyId: string): Promise<PublicKeyInfo>;
    /**
     * Get a list of public keys.
     *
     * @param includeDeleted If `true`, include deleted keys in response.
     * @returns A `Promise` that resolves to object of type
     * `PublicKeyInfoRedactedList` representing the list of public keys on the
     * Hive Public Key service.
     */
    list(includeDeleted?: boolean): Promise<PublicKeyInfoRedactedList>;
    /**
     * Create a new public key.
     *
     * @param info The public key to store on the Hive Public Key Service.
     */
    create(info: PublicKeyStorePayload): Promise<void>;
    /**
     * Delete a public key.
     *
     * @param keyId Key Id
     */
    delete(keyId: string): Promise<void>;
    private axiosErrorHandler;
}
