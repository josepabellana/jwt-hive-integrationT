"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HivePublicKeyDeletedError = exports.HivePublicKeyNotFoundError = exports.HivePublicKeyValidationError = exports.HiveAuthorizationError = void 0;
const axios_1 = __importDefault(require("axios"));
/** A class encapsulating authentication errors to the Hive Public Key Service.
 * */
class HiveAuthorizationError extends Error {
    constructor() {
        super("Authorization required: missing or invalid partner token");
        this.name = "HiveAuthorizationError";
    }
}
exports.HiveAuthorizationError = HiveAuthorizationError;
/** A class encapsulating validation errors from the Hive Public Key Service. */
class HivePublicKeyValidationError extends Error {
    constructor(errors) {
        super(`Public key validation error: ${Array.isArray(errors) ? errors.join('; ') : errors}`);
        this.name = "HiveValidationError";
    }
}
exports.HivePublicKeyValidationError = HivePublicKeyValidationError;
/** A class encapsulating an error from the Hive Public Key Service when
 * requesting a key that has not been published to the service. */
class HivePublicKeyNotFoundError extends Error {
    constructor(partnerId, keyId) {
        super(`Public key not found: ${partnerId}/${keyId}`);
        this.name = "HivePublicKeyNotFoundError";
    }
}
exports.HivePublicKeyNotFoundError = HivePublicKeyNotFoundError;
/** A class encapsulating an error from the Hive Public Key Service when
 * requesting a key that has been deleted on the service. */
class HivePublicKeyDeletedError extends Error {
    constructor(partnerId, keyId) {
        super(`Public key has been deleted: ${partnerId}/${keyId}`);
        this.name = "HivePublicKeyDeletedError";
    }
}
exports.HivePublicKeyDeletedError = HivePublicKeyDeletedError;
/** A helper class encapsulating the CRUD methods of the Hive Public Key
 * Service. */
class HivePublicKeyServiceClient {
    /**
     * Construct a new client to the Hive Public Key Service.
     *
     * @param partnerId Partner Id
     * @param partnerToken Partner Token
     * @param endpoint The endpoint (`test` or `prod`) to send requests to
     */
    constructor(partnerId, partnerToken, endpoint = 'prod') {
        const baseURL = `https://api${endpoint === 'prod' ? '' : `-${endpoint}`}.hivestreaming.com/v1`;
        this.partnerId = partnerId;
        this.client = axios_1.default.create({
            baseURL,
            headers: {
                'X-Hive-Partner-Token': partnerToken,
                'Content-Type': 'application/json'
            }
        });
    }
    /**
     * Get an individual public key.
     *
     * @param keyId Key Id
     * @returns A `Promise` that resolves to object of type `PublicKeyInfo`
     * representing the public key on the Hive Public Key service.
     */
    async get(keyId) {
        try {
            const res = await this.client.get(`/publickey/${this.partnerId}/${keyId}`);
            return res.data;
        }
        catch (error) {
            this.axiosErrorHandler(error, keyId);
        }
    }
    /**
     * Get a list of public keys.
     *
     * @param includeDeleted If `true`, include deleted keys in response.
     * @returns A `Promise` that resolves to object of type
     * `PublicKeyInfoRedactedList` representing the list of public keys on the
     * Hive Public Key service.
     */
    async list(includeDeleted = false) {
        try {
            const res = await this.client.get(`/publickey/${this.partnerId}?includeDeleted=${includeDeleted}`);
            return res.data;
        }
        catch (error) {
            this.axiosErrorHandler(error);
        }
    }
    /**
     * Create a new public key.
     *
     * @param info The public key to store on the Hive Public Key Service.
     */
    async create(info) {
        try {
            await this.client.post('/publickey', info);
        }
        catch (error) {
            this.axiosErrorHandler(error, info.keyId);
        }
    }
    /**
     * Delete a public key.
     *
     * @param keyId Key Id
     */
    async delete(keyId) {
        try {
            await this.client.delete(`/publickey/${this.partnerId}/${keyId}`);
        }
        catch (error) {
            this.axiosErrorHandler(error);
        }
    }
    axiosErrorHandler(error, keyId) {
        if (axios_1.default.isAxiosError(error)) {
            if (error.response !== undefined) {
                const { data, status } = error.response;
                if (status == 400) {
                    throw new HivePublicKeyValidationError(data);
                }
                else if (status === 403) {
                    throw new HiveAuthorizationError();
                }
                else if (status == 404) {
                    throw new HivePublicKeyNotFoundError(this.partnerId, keyId);
                }
                else if (status == 410) {
                    throw new HivePublicKeyDeletedError(this.partnerId, keyId);
                }
            }
        }
        throw error;
    }
}
exports.default = HivePublicKeyServiceClient;
