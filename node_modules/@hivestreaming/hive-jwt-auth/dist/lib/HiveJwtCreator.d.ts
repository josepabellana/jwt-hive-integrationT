/// <reference types="node" />
/**
 * Helper class to create JWTs for authenticating with Hive services using the
 * Hive plugin.
 */
export default class HiveJwtCreator {
    /** Partner Id */
    private partnerId;
    /** Private key */
    private privateKey;
    /**
     * Constructor for `HiveJwtCreator`
     * @param {string} partnerId Partner Id
     * @param {Buffer} privateKey Private key contents
     */
    constructor(partnerId: string, privateKey: Buffer);
    /**
     * Construct a new `HiveJwtCreator` given a private key filename. An error
     * reading the file will bubble to caller.
     * @param {string} partnerId Partner Id
     * @param {string} privateKeyFilename Private key filename
     */
    static create(partnerId: string, privateKeyFilename: string): Promise<HiveJwtCreator>;
    /**
     * Synchronously onstruct a new `HiveJwtCreator` given a private key
     * filename. An error reading the file will bubble to caller.
     * @param {string} partnerId Partner Id
     * @param {string} privateKeyFilename Private key filename
     */
    static createSync(partnerId: string, privateKeyFilename: string): HiveJwtCreator;
    /**
     * Create a new JWT.
     * @param {string} keyId Key Id
     * @param {string} customerId Customer Id
     * @param {string} videoId Video Id (also known as Content Id).
     * @param {string[]} manifests List of manifests
     * @param {string | number} expiresIn Expires in, expressed in seconds or a
     * string describing a time span [zeit/ms](https://github.com/zeit/ms.js).
     * Eg: 60, "2 days", "10h", "7d"
     * @param {string} eventName Event name
     */
    sign(keyId: string, customerId: string, videoId: string, manifests: string[], expiresIn: string | number, eventName?: string): string;
    /**
     * Create a new JWT.
     * @param {string} keyId Key Id
     * @param {string} customerId Customer Id
     * @param {string} videoId Video Id (also known as Content Id).
     * @param {string | number} expiresIn Expires in, expressed in seconds or a
     * string describing a time span [zeit/ms](https://github.com/zeit/ms.js).
     * Eg: 60, "2 days", "10h", "7d"
     * @param {'test' | 'prod'} endpoint Endpoint in URL.
     */
    signReporting(keyId: string, customerId: string, videoId: string, expiresIn: string | number, endpoint?: 'test' | 'prod'): string;
}
